name: Deploy frontend to production

# Manual deployment trigger
on:
  workflow_dispatch:
    inputs:
      APP_VERSION:
        description: "App version, eg. 'v0.1.2'"
        required: true
        default: 'v0.0.0'
      FRONTEND_URL:
        description: 'Frontend URL (for QR code generation)'
        required: true
        default: 'https://lively-meadow-0abbd281e-preview.westus2.5.azurestaticapps.net/'
      APP_NAME:
        description: 'Frontend app name on Azure Static Web Apps'
        required: true
        default: 'bendevfe'
      APP_ENVIRONMENT:
        type: choice
        description: "Deployment environment, eg. 'preview' or 'production'"
        required: true
        options:
          - 'preview'
          - 'production'
        default: 'preview'

env:
  FRONTEND_URL: ${{ github.event.inputs.FRONTEND_URL }}                  # set this to the frontend URL (for QR code generation)
  STATIC_APP_NAME: ${{ github.event.inputs.APP_NAME }}                             # set this to the name of the frontend app on Azure Static Web Apps
  NODE_VERSION: 18
  APP_ENVIRONMENT: ${{ github.event.inputs.APP_ENVIRONMENT }}                                 # set this to 'production' for production deployment or 'preview' for staging deployment.
  APP_VERSION: ${{ github.event.inputs.APP_VERSION }}                                 # set this to the version of the app being deployed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Checkout
        uses: actions/checkout@v4.1.7
      - name: Generate Git Tag
        id: generate_tag
        run: |
          VERSION_PREFIX="v"
          VERSION_MAJOR_MINOR="1.0"
          VERSION_PATCH=$(git tag --list "${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.*" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+$')
          if [ -z "$VERSION_PATCH" ]; then
            VERSION_PATCH=0
          else
            VERSION_PATCH=$((VERSION_PATCH + 1))
          fi
          NEW_TAG="${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.${VERSION_PATCH}"
          echo "Generated new tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      - name: Push Git Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG
      - name: build frontend
        working-directory: packages/frontend
        run: |
          npm ci
          npx nuxi build --preset=azure
      - name: Deploy frontend
        if: github.ref == 'refs/heads/main'
        working-directory: ./packages/frontend
        run: |
          npx @azure/static-web-apps-cli deploy .output/public/ --api-location .output/server/ --app-name=${{ env.STATIC_APP_NAME }} --env ${{ env.APP_ENVIRONMENT }} --api-language=node --api-version=${{ env.NODE_VERSION }} --deployment-token  ${{ secrets.AZURE_SWA_DEPLOYMENT_TOKEN }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ env.STATIC_APP_NAME }}-${{ env.APP_VERSION }}
          path: packages/frontend/.output/**
